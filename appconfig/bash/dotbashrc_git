# get the path to this script
REPO_PATH="$(cd "$(dirname "$BASH_SOURCE")"/../..; pwd)"

# set the TMUX_BIN, prefer the user-compiled one
[ -f /usr/local/bin/tmux ] && export TMUX_BIN=/usr/local/bin/tmux
[ ! -f /usr/local/bin/tmux ] && export TMUX_BIN=/usr/bin/tmux

export SHELL=/bin/bash

# the location of `once generated ctags file`
export CTAGS_FILE_ONCE="~/tags-once"

# set vi mode in bash
# set -o vi # EPIGEN_ADD_LINE_TOMAS

# create alisases
alias sb="source ~/.bashrc"

source "$REPO_PATH/appconfig/shell/commons.sh"

# is the shell running interactively
case "$-" in
  *i*) INTERACTIVE_SHELL=1
esac

# fzf
[ -f ~/.config/fzf/fzf.bash ] && source ~/.config/fzf/fzf.bash

# running new tmux (or attaching) with session name derived from parent bash pid
runTmux() {

  SESSION_NAME="T$BASHPID"

  # try to find session with the correct session id (based on the bashs PID)
  EXISTING_SESSION=`$TMUX_BIN ls 2> /dev/null | grep "$SESSION_NAME" | wc -l`

  if [ "$EXISTING_SESSION" -gt "0" ]; then

    # if such session exists, attach to it
    $TMUX_BIN -2 attach-session -t "$SESSION_NAME"

  else

    # if such session does not exist, create it
    $TMUX_BIN new-session -s "$SESSION_NAME"

  fi

  # hook after exitting the session
  # when the session exists, find a file in /tmp with the name of the session
  # and extract a path from it. Then cd to it.
  FILENAME="/tmp/tmux_restore_path.txt"
  if [ -f $FILENAME ]; then

    MY_PATH=$(tail -n 1 $FILENAME)

    rm /tmp/tmux_restore_path.txt

    cd $MY_PATH

  fi
}
if [ ! -z "$INTERACTIVE_SHELL" ]; then # when loaded interactively
  _trap_exit() {
    pwd >> /tmp/tmux_restore_path.txt
    forceKillTmuxSession "T$BASHPID"
  }
  trap _trap_exit EXIT
fi

# VIM alias for running vim in tmux and in servermode
runVim() {

  VIM_CMD=$(echo "$EDITOR ${@}")

  # if the tmux session does not exist, create new and run vim in it
  if [ -z $TMUX ]; then

    SESSION_NAME="T$BASHPID"

    # if there is a tmux session with the same name as the current bashpid
    num=`$TMUX_BIN ls 2> /dev/null | grep "$SESSION_NAME" | wc -l`
    if [ "$num" -gt "0" ]; then

      ID=`$TMUX_BIN new-window -t "$SESSION_NAME" -a -P`
      sleep 1.0
      $TMUX_BIN send-keys -t $ID "$VIM_CMD" C-m
      $TMUX_BIN -2 attach-session -t "$SESSION_NAME"

    else

      $TMUX_BIN new-session -s "$SESSION_NAME" -d "$VIM_CMD" \; attach

    fi

  else

    bash -c "$VIM_CMD"

  fi
}
alias vim=runVim

# source tmuxinator
source $REPO_PATH/submodules/tmuxinator/completion/tmuxinator.bash

# by default, athame should be off
export ATHAME_ENABLED=0
export ATHAME_SHOW_MODE=0
export ATHAME_VIM_PERSIST=0
export ATHAME_SHOW_ERROR=0

# but if we are in tmux launched by the user/terminal (not tmuxinator)
# and if user want to use athame, use it
if [ -n "$TMUX" ]; then

  if [ "$USE_ATHAME" = "true" ]; then

    SESSION_NAME=`$TMUX_BIN display-message -p '#S'`

    if [[ $SESSION_NAME =~ ^T[0-9]+$ ]]; then

      export ATHAME_ENABLED=1

    fi
  fi
fi

# load tmux automatically
if [ ! -z "$INTERACTIVE_SHELL" ]; then # when loaded interactively, run tmux
  if command -v $TMUX_BIN>/dev/null; then
    if [ "$RUN_TMUX" = "true" ]; then
      [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && runTmux
    fi
  fi
fi
