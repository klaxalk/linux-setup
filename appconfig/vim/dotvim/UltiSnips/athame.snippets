snippet fdisk "" Ab
sudo fdisk -${1:l}
endsnippet

snippet mount "" Ab
sudo mount
endsnippet

snippet reboot "" Ab
sudo reboot
endsnippet

snippet sb "" Ab
source ~/.bashrc
endsnippet

snippet ra "" Ab
ranger
endsnippet

snippet ll "" Ab
ls -${2:lah}${1}
endsnippet

snippet :q "" Ab
exit
endsnippet

snippet octave "" Ab
octave ${1:--no-gui}
endsnippet

snippet mux "" Ab
tmuxinator
endsnippet

snippet "git submodule init" "" Ab
git submodule init && git submodule update
endsnippet

snippet gs "" Ab
git status
endsnippet

snippet "git reset( )+" "" Abr
git reset ${1:--hard}
endsnippet

snippet gd "" Ab
git diff
endsnippet

snippet "grep ( )*" "" Abr
grep ${2:-nr -e} "${1}"
endsnippet

snippet goto "" Ab
rosservice call /uav${1:1}/trackers_manager/mpc_tracker/goTo "goal: [${2:0}, ${3:0}, ${4:3}, ${5:0}]"
endsnippet

snippet gorel "" Ab
rosservice call /uav${1:1}/trackers_manager/mpc_tracker/goToRelative "goal: [${2:0}, ${3:0}, ${4:0}, ${5:0}]"
endsnippet

snippet gppo "" Ab
git pull ${1:origin} ${2:`git branch | grep \* | sed 's/\* \([a-Z]*\)/\1/'`} && git push $1 $2
endsnippet

snippet gppl "" Ab
git pull ${1:local} ${2:`git branch | grep \* | sed 's/\* \([a-Z]*\)/\1/'`} && git push $1 $2
endsnippet

snippet "git commit( )+" "" Abr
git commit -m "${1:${VISUAL}}" ${2:-a}
endsnippet

snippet "for( )*" "" ir
for ${1}; do ${2:${VISUAL}}; done
endsnippet

snippet "if( )*" "" ir
if ${1}; then ${2:${VISUAL}}; fi
endsnippet

snippet "ife( )*" "" ir
if ${1}; then ${2:${VISUAL}}; else fi
endsnippet

snippet "ifei( )*" "" ir
if ${1}; then ${2:${VISUAL}}; elif ${3}; then ${4} fi
endsnippet

# this part contains python snippets which rely on global complete function

global !p
def complete(t, opts):
	if t:
		opts = [ m[ len(t): ] for m in opts if m.startswith(t) ]
	if len(opts) == 1:
		return opts[0]
	if len(opts) == 0:
		return ""
	else:
		return "(" + '|'.join(opts) + ')'
endglobal

snippet "git checkout $" "" Abr
git checkout $1`!p
from git import Repo
try:
	r = Repo(path, search_parent_directories=True)
except:
	snip.rv=" # not a git repo"
else:
	repo_heads = r.heads
	repo_heads_names = [h.name for h in repo_heads]
	snip.rv=complete(t[1], repo_heads_names)
`
endsnippet

snippet "git pull( )+" "" Abr
git pull ${1:origin} ${2:`git branch | grep \* | sed 's/\* \([a-Z]*\)/\1/'`}${3:`!p
from git import Repo
try:
	r = Repo(path, search_parent_directories=True)
except:
	snip.rv=" # not a git repo"
else:
	repo_heads = r.heads
	repo_heads_names = [h.name for h in repo_heads]
	snip.rv=complete(t[2], repo_heads_names)
`
}
endsnippet

snippet "git push( )+" "" Abr
git push ${1:origin} ${2:`git branch | grep \* | sed 's/\* \([a-Z]*\)/\1/'`}${3:`!p
from git import Repo
try:
	r = Repo(path, search_parent_directories=True)
except:
	snip.rv=" # not a git repo"
else:
	repo_heads = r.heads
	repo_heads_names = [h.name for h in repo_heads]
	snip.rv=complete(t[2], repo_heads_names)
`
}
endsnippet

snippet "rostopic $" "" Abr
rostopic $1`!p
snip.rv=complete(t[1], ["echo", "list", "hz", "type"])`
endsnippet

snippet "vim /etc/network/i.*" "" Abr
sudo vim /etc/network/i
endsnippet

