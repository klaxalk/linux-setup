global !p

def file_is_plugin():
	import re
	fh = open(path)
	for line in fh:
		plugin_pattern = re.compile("^PLUGINLIB_EXPORT_CLASS.*$")
		if plugin_pattern.match(line):
			return True
	return False

def file_is_ros2_plugin():
	import re
	fh = open(path)
	for line in fh:
		plugin_pattern = re.compile("^RCLCPP_COMPONENTS_REGISTER_NODE.*$")
		if plugin_pattern.match(line):
			return True
	return False

def file_is_gazebo_plugin():
	import re
	fh = open(path)
	for line in fh:
		plugin_pattern = re.compile("^.*GAZEBO_VISIBLE.*$")
		if plugin_pattern.match(line):
			return True
	return False

def get_class_name():
	import re
	fh = open(path)
	class_name = ""
	for line in fh:
		class_pattern = re.compile("^\s*class ")
		if class_pattern.match(line):
			class_name = line.split()[1]
	return class_name
	return ""

def get_gazebo_plugin_class_name():
	import re
	fh = open(path)
	class_name = ""
	for line in fh:
		class_pattern = re.compile("^\s*class ")
		if class_pattern.match(line):
			class_name = line.split()[2]
	return class_name
	return ""

def ros_info():
	text=""
	if match.group(1) == "rinfo":
		text="ROS_INFO"
	elif match.group(1) == "rwarn":
		text="ROS_WARN"
	elif match.group(1) == "rerr":
		text="ROS_ERROR"
	elif match.group(1) == "rdeb":
		text="ROS_DEBUG"
	if (match.group(2) == "s") or (match.group(3) == "s"):
		text+="_STREAM"
	if (match.group(2) == "t") or (match.group(3) == "t"):
		text+="_THROTTLE"
	if (match.group(2) == "o") or (match.group(3) == "o"):
		text+="_ONCE"
	return text

def ros2_info():
	text=""
	if match.group(1) == "info":
		text="RCLCPP_INFO"
	elif match.group(1) == "warn":
		text="RCLCPP_WARN"
	elif match.group(1) == "err":
		text="RCLCPP_ERROR"
	elif match.group(1) == "deb":
		text="RCLCPP_DEBUG"
	if (match.group(2) == "s") or (match.group(3) == "s"):
		text+="_STREAM"
	if (match.group(2) == "t") or (match.group(3) == "t"):
		text+="_THROTTLE"
	if (match.group(2) == "o") or (match.group(3) == "o"):
		text+="_ONCE"
	return text

def stream_info():
	text=""
	if match.group(1) == "sinfo":
		text="ROS_INFO_STREAM"
	elif match.group(1) == "swarn":
		text="ROS_WARN_STREAM"
	elif match.group(1) == "serr":
		text="ROS_ERROR_STREAM"
	elif match.group(1) == "sdeb":
		text="ROS_DEBUG_STREAM"
	if (match.group(2) == "t"):
		text+="_THROTTLE"
	return text

def nodelet_info():
	text=""
	if match.group(1) == "ninfo":
		text="NODELET_INFO"
	elif match.group(1) == "nwarn":
		text="NODELET_WARN"
	elif match.group(1) == "nerr":
		text="NODELET_ERROR"
	if match.group(2) == "t":
		text+="_THROTTLE"
	return text

endglobal

snippet for
for (int ${1:it} = ${2:0}; $1 < ${3}; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet fori
for (int i = ${1:0}; i < ${2}; i++) {
	${0:${VISUAL}}
}
endsnippet

snippet forocv
for (int ri = 0; ri < ${1:image}.rows; ri++)
{
	for (int ci = 0; ci < $1.cols; ci++)
	{
		${0:${VISUAL}}
	}
}
endsnippet

snippet while
while (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet if
if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife
if (${1}) {
	${2:${VISUAL}}
} else {
	${3}
}
endsnippet

snippet mutex
std::mutex mutex_
endsnippet

snippet "lock" "" rb
std::scoped_lock lock(${1});
endsnippet

snippet "lockscope" "" rb
{
	std::scoped_lock lock(${1});

	${2:${VISUAL}}
}
endsnippet

snippet "({})|(scope)" "" rb
{
	${1:${VISUAL}}
}
endsnippet

snippet switch
switch (${1}) {
case ${2}: {

		${0:${VISUAL}}

		break;
	}
}
endsnippet

snippet case
case ${1}: {

	${2}

	break;
}
endsnippet

snippet comment
/*
${0:${VISUAL}}
*/
endsnippet

snippet include
#include <${1}>
endsnippet

snippet debuginfo
ROS_INFO("Starting: ${1:pes}");
{
	${2:${VISUAL}}
}
ROS_INFO("Ending: $1");
endsnippet

snippet pubtry
try {
	${1:${VISUAL}}
} catch (${3:...}) {
	ROS_ERROR("exception caught during publishing topic '%s'", ${2}.getTopic().c_str());
}
endsnippet

snippet try
try {
	${1:${VISUAL}}
} catch (${2:...}) {
	ROS_ERROR("exception caught ${3}");
}
endsnippet

snippet catch
catch (${1:...}) {
	ROS_ERROR("exception caught ${2}");
}
endsnippet

snippet saturate
if (!std::isfinite(${1:${VISUAL}})) {
	$1 = 0;
	ROS_ERROR("NaN detected in variable \"$1\", setting it to 0 and returning!!!");
	return;
} else if ($1 > ${2}) {
$1 = $2;
} else if ($1 < -${3}) {
$1 = -$3;
}
endsnippet

snippet checknan
if (!std::isfinite(${1:${VISUAL}})) {
	ROS_ERROR("NaN detected in variable \"$1\"!!!");
}
endsnippet

snippet "(sinfo|swarn|serr|sdeb)(t)?" "" re
`!p
snip.rv=stream_info()+"("
``!p
if (match.group(2) == "t"):
	snip.rv="1.0, "
`"`!p
is_plugin = file_is_plugin()
is_gazebo_plugin = file_is_gazebo_plugin()
if is_plugin:
	snip.rv='['+get_class_name()+']: " << ss.str()'
if is_gazebo_plugin:
	snip.rv='['+get_gazebo_plugin_class_name()+']: " << ss.str()'
if not (is_plugin or is_gazebo_plugin):
	snip.rv="[%s]: "
if not is_plugin and not is_gazebo_plugin:
	snip.rv=", ros::this_node::getName().c_str()"``!p
if "%" in t[1]:
	snip.rv=", "
else:
	snip.rv=""
`${3});
endsnippet

snippet "(rinfo|rwarn|rerr|rdeb)(t|s|o)?(t|s)?" "" re
`!p
snip.rv=ros_info()+"("
``!p
if (match.group(2) == "t") or (match.group(3) == "t") :
	snip.rv="1.0, "
`"`!p
is_plugin = file_is_plugin()
is_gazebo_plugin = file_is_gazebo_plugin()
if is_plugin:
	snip.rv='['+get_class_name()+']'
elif is_gazebo_plugin:
	snip.rv='['+get_gazebo_plugin_class_name()+']'
else:
	snip.rv="[%s]"`: ${1}"`!p
if not is_plugin and not is_gazebo_plugin:
	snip.rv=", ros::this_node::getName().c_str()"``!p
if "%" in t[1]:
	snip.rv=", "
else:
	snip.rv=""
`${3});
endsnippet

snippet "2(info|warn|err|deb)(t|s|o)?(t|s)?" "" re
`!p
snip.rv=ros2_info()+"(this->get_logger(), "
``!p
if (match.group(2) == "t") or (match.group(3) == "t") :
	snip.rv="1.0, "
`"`!p
is_plugin = file_is_ros2_plugin()
if is_plugin:
	snip.rv='['+get_class_name()+']'
else:
	snip.rv="[%s]"`: ${1}"`!p
if "%" in t[1]:
	snip.rv=", "
else:
	snip.rv=""
`${3});
endsnippet

snippet "(ninfo|nwarn|nerr)(t)?" "" re
`!p
snip.rv=nodelet_info()+"("
``!p
if match.group(2) == "t":
	snip.rv="1.0, "
`"`!p
if file_is_plugin():
	snip.rv='['+get_class_name()+']'
else:
	snip.rv="[%s]"`: ${1}"`!p
if not file_is_plugin():
	snip.rv=", ros::this_node::getName().c_str()"``!p
if "%" in t[1]:
	snip.rv=", "
else:
	snip.rv=""
`${3});
endsnippet

snippet "///" "" r
// | `!p import math; snip.rv='-'*(30-(math.floor(len(t[1])/2.0))-2)` ${1} `!p import math; snip.rv='-'*(30-(math.ceil(len(t[1])/2.0))-2)` |
endsnippet

snippet "////" "" r
// --------------------------------------------------------------
// | `!p import math; snip.rv=' '*(30-(math.floor(len(t[1])/2.0))-2)` ${1} `!p import math; snip.rv=' '*(30-(math.ceil(len(t[1])/2.0))-2)` |
// --------------------------------------------------------------
endsnippet

snippet "fold" "" r
/* ${1} //{ */

${2:${VISUAL}}

//}
endsnippet

snippet "method" "" r
/* ${1}() method //{ */
${2:${VISUAL}}
//}
endsnippet

snippet "block" "" r
{
	${2:${VISUAL}}
}
endsnippet

snippet class
class ${1} {

public:

	$1();

private:

};

// constructor
$1::$1() {

}
endsnippet

snippet main
int main(int argc, char **argv) {

${1}

	return 0;
};
endsnippet

snippet subscriber
ros::Subscriber ${1}
endsnippet

snippet publisher
ros::Publisher ${1}
endsnippet

snippet serviceserver
ros::ServiceServer ${1}
endsnippet

snippet serviceclient
ros::ServiceClient ${1}
endsnippet

snippet rosinit
ros::init(argc, argv, "${1:node_name}");
endsnippet

snippet "rosok" "" ri
ros::ok()
endsnippet

snippet "ros" "" ri
ros::
endsnippet

snippet "spin" "" ri
spin()
endsnippet

snippet "spinonce" "" ri
spinOnce()
endsnippet

snippet "nodehandle" "" ri
ros::NodeHandle("~")
endsnippet

snippet test
`!p
import re
fh = open(path)
for line in fh:
	pattern = re.compile("^class ")
	if pattern.match(line):
		snip.rv = line.split()[1]
`
endsnippet

snippet header
#ifndef ${1:`!p snip.rv = snip.basename.upper()`}_H
#define $1_H

${2:${VISUAL}}

#endif // $1_H
endsnippet

snippet namespace
namespace ${1} {

${2:${VISUAL}}

}
endsnippet

snippet pow "" i
pow(${1}, ${2:2})
endsnippet

snippet paramloader
mrs_lib::ParamLoader param_loader(nh_, `!p
if file_is_plugin():
	snip.rv='"'+get_class_name()+'"'
else:
	snip.rv="ros::this_node::getName().c_str()"`);
endsnippet

snippet loadparam
param_loader.load_param<${1:double}>("${1}")
endsnippet

snippet fora
for (auto& ${1:el} : ${2:data})
{
	${3:${VISUAL}}
}
endsnippet

snippet forca
for (const auto& ${1:el} : ${2:data})
{
	${3:${VISUAL}}
}
endsnippet

snippet forit
for (auto it = std::begin(${1:data}); it != std::end($1); ++it)
{
	${2:${VISUAL}}
}
endsnippet

snippet forcit
for (auto it = std::cbegin(${1:data}); it != std::cend($1); ++it)
{
	${2:${VISUAL}}
}
endsnippet

snippet "unused" "" ir
[[maybe_unused]]
endsnippet

snippet "sharedptr" "" ir
std::shared_ptr<${1:${VISUAL}}>
endsnippet

snippet "def" "" r
#define ${1}
endsnippet

snippet "(abs)|(fabs)" "" r
fabs(${1:${VISUAL}})
endsnippet

snippet "getm" "" r
auto ${1} = mrs_lib::get_mutexed(mutex_$1_, $1_);
endsnippet

snippet "getmm" "" r
auto [${2}] = mrs_lib::get_mutexed(${1}, $2);
endsnippet

snippet "setm" "" r
mrs_lib::set_mutexed(${1}, ${2}, $2_);
endsnippet

snippet "setmm" "" r
mrs_lib::set_mutexed(${1}, std::tuple(${2}), std::forward_as_tuple($2));
endsnippet

snippet "floatmin" "" ir
std::numeric_limits<float>::lowest()
endsnippet

snippet "floatmax" "" ir
std::numeric_limits<float>::max()
endsnippet

snippet "doublemin" "" ir
std::numeric_limits<double>::lowest()
endsnippet

snippet "doublemax" "" ir
std::numeric_limits<double>::max()
endsnippet

snippet "^\s*ss" "" r
std::stringstream ss;
endsnippet

snippet "printf" "" r
printf("${1}\n", ${2});
endsnippet

snippet "print" "" r
printf("${1}\n");
endsnippet

snippet "att" "" ri
mrs_lib::AttitudeConverter(${1})${2};
endsnippet

snippet "tuple" "" ri
std::tuple(${1})
endsnippet

snippet "isfinite" "std::isfinite()" ri
std::isfinite(${1:${VISUAL}})
endsnippet

snippet "getheading" "" ri
try {
	${1} = mrs_lib::getHeading(${2});
} catch (mrs_lib::AttitudeConverter::GetHeadingException e) {
	ROS_ERROR_THROTTLE(1.0, "[${3}]: exception caught: '%s'", e.what());
}
endsnippet

snippet "vec" "" ri
vec2_t(${1:${VISUAL}})
endsnippet

snippet "advertise" "" ri
advertise<${1}>("${2}", ${3:1});
endsnippet

snippet "subscribe" "" ri
subscribe("${1}", ${2:1}, &${3:class}::${4:callback}, this, ros::TransportHints().tcpNoDelay());
endsnippet

snippet "clang-format" "" ri
// clang-format off
${1:${VISUAL}}
// clang-format on
endsnippet

snippet "ifdef" "" ri
#ifdef ${1}
${2:${VISUAL}}
#endif
endsnippet

snippet "atomic" "" ri
std::atomic<${1}>
endsnippet

snippet "optional" "" ri
std::optional<${1:${VISUAL}}>
endsnippet

snippet "cout" "" ri
std::cout << 
endsnippet

snippet "string" "" r
std::string
endsnippet

snippet "endl" "" ri
std::endl
endsnippet

snippet "vector" "" ri
std::vector<${1}> 
endsnippet

snippet "sqrt" "" ri
sqrt(${1})
endsnippet
